# Ultralytics YOLO ðŸš€, GPL-3.0 license
# YOLOv8-pose keypoints/pose estimation model. For Usage examples see https://docs.ultralytics.com/tasks/pose

# Parameters
nc: 1  # number of classes
kpt_shape: [5, 3]  # number of keypoints, number of dims (2 for x,y or 3 for x,y,visible)
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple
activation: nn.SiLU()

# custom backbone
backbone:
  # [from, number, module, args]
  [ 
    [-1, 1, AdaptationBlock, [192, 8, 4, null, False]], # 0 adaptation
    [-1, 1, Split, [3, 0]], # 1 # descrambled feature map
    [-2, 1, Split, [16, 1]], # 2 # block scrambling map

    [ -2, 1, StemBlock, [16, 3, 2] ],    # 0-P2/4 # 3
    [ -1, 1, Shuffle_Block, [48, 2]], # 1-P3/8 # 4
    [ -1, 2, Shuffle_Block, [48, 1]], # 2 # 5
    [ -1, 1, Shuffle_Block, [96, 2]], # 3-P4/16 # 6
    [ -1, 5, Shuffle_Block, [96, 1]], # 4 # 7
    [ -1, 1, Shuffle_Block_Attention, [192, 2]], # 5-P5/32 # 8
    [ -1, 2, Shuffle_Block_Attention, [192, 1]], # 6 # 9
    [ -1, 1, SPPF, [192, 5]], # 7 # 10
  ]

# v5lite-e head
head:
  [ [ -1, 1, Conv, [48, 1, 1]], # 8 # 11
    [ -1, 1, nn.Upsample, [ None, 2, 'nearest']], # 9 # 12
    [[ -1, 7], 1, Concat, [1]],  # cat backbone P4 # 13
    [ -1, 1, CBAM, [7]], # 14
    [ -1, 1, DWConvblock, [48, 3, 1]],  # 12 # 15

    [ -1, 1, Conv, [48, 1, 1]], # 13 # 16
    [ -1, 1, nn.Upsample, [ None, 2, 'nearest']], # 14 # 17
    [[ -1, 5], 1, Concat, [1]],  # cat backbone P3 # 18
    [ -1, 1, CBAM, [7]], # 17 # 20
    [ -1, 1, DWConvblock, [48, 3, 1] ],  # 16 (P3/8-small) # 19
    [[ -1, 5], 1, Concat, [1]],  # 18 BiFPN # 21
    [ -1, 1, Conv, [48, 1, 1]], # 19 BiFPN # 22

    [-2, 1, DWConvblock, [48, 3, 2]], # 20 # 23
    [ -1, 1, CBAM, [7]], # 21 # 24
    [[ -1, 16, 7], 1, Concat, [1]],  # cat head P4 # 25
    [ -1, 1, DWConvblock, [48, 3, 1]],  # 23 (P4/16-medium) # 26

    [ -1, 1, DWConvblock, [48, 3, 2]], # 24 # 27
    [ -1, 1, CBAM, [7]], # 25 # 28
    [[ -1, 11, 10], 1, Concat, [1]],  # cat head P5 # 29
    [ -1, 1, DWConvblock, [48, 3, 1]],  # 27 (P5/32-large) # 30
    [[ 1, 2, 22, 26, 30], 1, ScrambledPose, [nc, kpt_shape  ]],  # Detect(P3, P4, P5)
  ]
